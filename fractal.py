 # -*- coding: utf-8 -*-
from __future__ import print_function, absolute_import
import numpy as np
import matplotlib.pyplot as plt
import scipy.misc


class BarnsleyFern:
    def __init__(self,x,y):
        self.x = x
        self.y = y
        self.param = np.array([[0.    , 	0.       , 	0.       , 	0.16, 	0., 	0.   , 	0.01],
                              [0.85 , 	0.04    , 	-0.04   , 	0.85, 	0, 	1.60, 	0.85],
                              [0.20 , 	-0.26   ,	0.23    , 	0.22, 	0,	1.60, 	0.07],
                              [-0.15,	0.28    , 	0.26    , 	0.24, 	0, 	0.44, 	0.07]]) #a,b,c,d,e,f,p
        self.color= [50,255,50]#[random.randint(0,255),random.randint(0,255),random.randint(0,255)]
        self.proba = np.cumsum(self.param[:,6])

    def fx(self, ):
        r = np.random.uniform()
        if r < self.proba[0]:
            i=0
        elif self.proba[0] <= r < self.proba[1]:
            i=1
        elif self.proba[1] <= r < self.proba[2]:
            i=2
        else:
            i=3
        x= self.param[i,0]*self.x + self.param[i,1]*self.y + self.param[i,4]
        self.y = self.param[i,2]*self.x + self.param[i,3]*self.y + self.param[i,5]
        self.x=x


class Apply:
    def __init__(self):
        self.nbi=0
        self.height=1080
        self.width=1920
        self.nb_itermax = 100000
        self.x0 =0.
        self.y0 =0.
        imgmat = np.zeros((self.width,self.height,3), dtype=np.uint8)
        self.BF = BarnsleyFern(self.x0,self.y0)
        #self.BF.iter(self.nb_itermax,imgmat,self.width,self.height)
        # img = Image.fromarray(imgmat, 'RGB')
        self.F = plt.figure()
        self.Ax = plt.imshow( np.swapaxes(imgmat, 1, 0))
        self.F.show()
        plt.pause(0.1)
        self.a=0
        return

    def iter(self,n):
        x = np.zeros(n)
        y = np.zeros(n)
        for i in np.arange(n):
            self.BF.fx()
            x[i],y[i]=self.BF.x,self.BF.y
        return x,y

    def scale(self,x, y ,width,height):
        x-=x.min()
        y-=y.min()
        rx =(width-1)/ (x.max() - x.min())
        ry =(height-1)/ (y.max() - y.min())
        r=min(rx,ry)
        x = (x-((x.max() - x.min())/2.))*r +width/2.
        y = y *r
        return x, y

    def coloredimg(self,img,x,y):
        for i in range(x.shape[0]):
            img[int(np.floor(x[i])),int(np.floor(y[i])),:]=self.BF.color

    def update_BF(self, ):
        if self.a ==0:
            self.BF.param = np.array([[0.369938362134,-0.725445227135,-0.59419558835,0.382994817675,-0.567100227058,0.75672723699,0.123152610671],
                                      [-0.12144892169,-0.886481812208,-0.682014796488,-0.00262650043838,0.700919514644,-0.851205652918,0.739817238095],
                                      [-0.120914782942,-0.679529987472,0.758710026834,0.00370524127773,0.737900441755,0.420392756053,0.0196865477286],
                                      [-0.132144719332,0.431059942048,-0.699391308092,-0.426029332889,0.776911014709,0.145903793359,0.117343603505]]) #a,b,c,d,e,f,p
        elif self.a ==1:
            self.BF.param = np.array([-0.536472223408,-0.985344741187,-0.934614671845,0.0156907836514,0.67764690747,-0.853795837681,0.535689997424,-0.83019211459,0.563781742243,-0.220231081195,-0.515210066256,0.680432018315,-0.976305533921,0.0344250869989,0.847604002984,-0.55419139525,-0.824434422523,0.547231030908,-0.926431825853,0.594897767138,0.112913334968,-0.96817702593,-0.15828109748,0.542932400925,0.36289678967,-0.443794775715,0.0885088340748,0.316971580609]).reshape((4,7))
        elif self.a ==2:
            self.BF.param = np.array([0.462026360433,0.471965710931,-0.709676638322,0.143187383587,0.803396076021,0.926433083183,0.639790580723,-0.603482251053,0.130294490587,0.139611015434,-0.431497597682,0.587331102409,0.872654484697,0.0933839270776,0.245855706606,-0.942996541874,0.823031109341,0.0189201048244,0.0346688542947,-0.99164843728,0.0399160691528,0.502763504733,-0.164023398156,0.501071406843,0.249478084134,-0.0278194746493,-0.164128744856,0.226909423047]).reshape((4,7))

        elif self.a ==3:
            self.BF.param = np.array([0.267034125584,0.960106768331,-0.326356176577,-0.301721189954,-0.655750036376,0.076046899162,0.0577997350685,0.538414508122,-0.688364609266,-0.511669181433,-0.649567827355,0.583789808697,0.19960787875,0.911478466228,0.22483076452,0.782794016508,-0.064114183293,-0.0318871069645,-0.399811771695,-0.103014421355,0.0082366906758,-0.319482753804,0.326139534803,0.862394185046,-0.917550366169,0.778941727024,-0.458773793292,0.0224851080275]).reshape((4,7))
        elif self.a ==4:
            self.BF.param = np.array([-0.719012842035,0.62731447739,-0.193015642788,0.924647752692,0.00792879828921,0.530067132111,0.0592473291775,0.182330092367,-0.113585064223,0.0778547101873,-0.447355973414,0.0864623930048,0.127811489909,0.195964772196,0.471298995825,-0.78744591803,0.0469415266978,-0.463772043579,0.0790920569046,0.520190185733,0.390269652737,0.922174956701,-0.557988174878,0.126104099441,0.753875995612,0.3665273361,-0.2568864018,0.35451824589]).reshape((4,7))
        elif self.a ==5:
             self.BF.param = np.array([0.65531331947,0.808141076353,-0.258469976777,0.457803082064,0.720887222099,-0.268721793494,0.569147134101,-0.130177735647,0.315164435106,0.29458769343,-0.336545748162,-0.331574221273,0.330201148389,0.033483879357,-0.330146882814,0.47239786306,-0.504803218269,0.052390268529,-0.70953376214,-0.804907352603,0.110148253202,0.161867399739,-0.306402513093,0.0576925714804,0.809941268462,0.252868918565,0.4587982107,0.28722073334]).reshape((4,7))
        elif self.a ==6:
            self.BF.param = np.array([-0.819838892441,0.567364300058,-0.121112153792,-0.74567268783,0.169747504206,-0.262223058736,0.0334495455118,0.905597008303,-0.714464980371,0.378525783051,0.645341595076,0.117168334013,-0.102772825705,0.966075229762,0.0704319070083,-0.489431842798,-0.985363995389,-0.113499475224,0.892379538756,0.282592783579,0.000114344104177,-0.68138505124,-0.939779556595,0.302810501715,-0.497112386355,-0.48838500258,-0.379565727035,0.00036088062196]).reshape((4,7))

        else:
            self.a=-2
        print(self.a)
        # self.color= [random.randint(0,255),random.randint(0,255),random.randint(0,255)]
        self.BF.proba = np.cumsum(self.BF.param[:,6])
        self.BF.x = self.x0
        self.BF.y = self.y0
        imgmat = np.zeros((self.width,self.height,3), dtype=np.uint8)
        x,y=self.iter(self.nb_itermax)
        x,y=self.scale(x, y ,self.width,self.height)
        self.coloredimg(imgmat,x,y)

        self.Ax.set_data(np.flip(np.swapaxes(imgmat, 1, 0),0))
        plt.pause(0.1)
        self.nbi+=1
        self.a +=1
        # scipy.misc.imsave('BF'+str(self.nbi).zfill(5)+'.png', np.flip(np.swapaxes(imgmat, 1, 0),0))
        return


root = Apply()
i=0
while root.a>=0:
    root.update_BF()
